"use client"

import { useState, useEffect } from "react"
import { Plus, LogOut, Calendar, TrendingUp, Target, Zap, MoreHorizontal, Trash2, CheckCircle2, Flame, ChevronLeft, ChevronRight } from "lucide-react"
import { Button } from "@/components/ui/button"
import { AddHabitDialog } from "@/components/add-habit-dialog"
import { cn } from "@/lib/utils"
import { createClient } from "@/lib/supabase"
import Link from 'next/link'
import { Session } from "@supabase/supabase-js"
import { Habit } from "@/lib/types"
import { Progress } from "@/components/ui/progress"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Card, CardContent } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useRouter } from 'next/navigation'
import { Wordmark } from '@/components/wordmark'

type TimePeriod = "grid"

interface SprintProgress {
  completed: number
  total: number
  daysLeft: number
  percentage: number
  currentStreak: number
}

function calculateSprintProgress(habit: Habit): SprintProgress {
  if (!habit || !habit.created_at) {
    return { completed: 0, total: 90, daysLeft: 90, percentage: 0, currentStreak: 0 };
  }

  const SPRINT_LENGTH = 90;
  const startDate = new Date(habit.created_at);
  const today = new Date();
  
  const endDate = new Date(startDate);
  endDate.setDate(startDate.getDate() + SPRINT_LENGTH);
  
  const effectiveToday = today > endDate ? endDate : today;

  let completedCount = 0;
  let totalOpportunities = 0;
  let currentStreak = 0;
  let tempStreak = 0;

  for (let i = 0; i < SPRINT_LENGTH; i++) {
    const loopDate = new Date(startDate);
    loopDate.setDate(startDate.getDate() + i);

    let isOpportunity = false;
    switch (habit.schedule.type) {
      case 'every_day':
        isOpportunity = true;
        break;
      case 'every_x_days':
        if (i % habit.schedule.interval === 0) {
          isOpportunity = true;
        }
        break;
      case 'specific_days':
        if (habit.schedule.days.includes(loopDate.getDay())) {
          isOpportunity = true;
        }
        break;
    }

    if (isOpportunity) {
        totalOpportunities++;
    }
      
    if (loopDate <= effectiveToday) {
        const dateStr = loopDate.toISOString().split('T')[0];
        if (habit.history[dateStr] === 'completed') {
            completedCount++;
        tempStreak++;
        currentStreak = Math.max(currentStreak, tempStreak);
      } else if (isOpportunity) {
        tempStreak = 0;
        }
    }
  }
  
  const dayDiff = Math.max(0, Math.ceil((effectiveToday.getTime() - startDate.getTime()) / (1000 * 3600 * 24)));
  const daysLeft = Math.max(0, SPRINT_LENGTH - dayDiff);
  const percentage = totalOpportunities > 0 ? (completedCount / totalOpportunities) * 100 : 0;

  return {
      completed: completedCount,
      total: totalOpportunities,
      daysLeft: daysLeft,
    percentage: Math.round(percentage),
    currentStreak: currentStreak,
  };
}

function DashboardHabitCard({ habit, selectedDate, onToggle, onDelete }: {
  habit: Habit;
  selectedDate: Date;
  onToggle: (habitId: string, date: Date) => void;
  onDelete: (habitId: string) => void;
}) {
  const selectedDateStr = selectedDate.toISOString().split("T")[0];
  const isCompleted = habit.history[selectedDateStr] === 'completed';
  const stats = calculateSprintProgress(habit);
  const today = new Date();
  const isToday = selectedDate.toDateString() === today.toDateString();
  const isFuture = selectedDate > today;
  
  const colorHex = habit.color?.replace('bg-blue-500', '#3b82f6')
    .replace('bg-green-500', '#22c55e')
    .replace('bg-purple-500', '#a855f7')
    .replace('bg-red-500', '#ef4444')
    .replace('bg-orange-500', '#f97316')
    .replace('bg-pink-500', '#ec4899')
    .replace('bg-cyan-500', '#06b6d4')
    .replace('bg-amber-500', '#f59e0b') || '#3b82f6';
  
  const completedColor = '#22c55e'; // Green for completed state

  const isScheduledForDate = (date: Date) => {
    const dayOfWeek = date.getDay();
    switch (habit.schedule.type) {
      case 'every_day':
        return true;
      case 'specific_days':
        return habit.schedule.days.includes(dayOfWeek);
      case 'every_x_days':
        const startDate = new Date(habit.created_at);
        const daysDiff = Math.floor((date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        return daysDiff >= 0 && daysDiff % habit.schedule.interval === 0;
      default:
        return false;
    }
  };

  const scheduled = isScheduledForDate(selectedDate);

  return (
    <Card className="group cursor-pointer transition-all duration-300 hover:shadow-lg border-0 bg-white shadow-md">
      <CardContent className="p-6">
        <div className="flex items-start justify-between mb-4">
          <div className="flex items-center gap-4">
            <button
              onClick={() => onToggle(habit.id, selectedDate)}
              disabled={!scheduled || isFuture}
              className={cn(
                "w-12 h-12 rounded-2xl border-2 transition-all duration-300 flex items-center justify-center hover:scale-105",
                scheduled && !isFuture ? (
                  isCompleted
                    ? "border-transparent shadow-lg"
                    : "border-neutral-300 hover:border-neutral-400"
                ) : "border-neutral-200 opacity-50 cursor-not-allowed"
              )}
              style={isCompleted && scheduled ? { 
                backgroundColor: completedColor,
                boxShadow: `0 4px 20px -4px ${completedColor}` 
              } : {}}
            >
              {isCompleted && scheduled && (
                <CheckCircle2 className="w-6 h-6 text-white" />
              )}
            </button>
            <div>
              <h3 className="text-lg font-semibold text-neutral-800">{habit.name}</h3>
              <div className="flex items-center gap-3 mt-1">
                {scheduled ? (
                  <Badge variant="secondary" className="bg-brand-100 text-brand-700 text-xs">
                    {isToday ? 'Scheduled Today' : isFuture ? 'Scheduled' : 'Was Scheduled'}
                  </Badge>
                ) : (
                  <Badge variant="secondary" className="bg-neutral-100 text-neutral-500 text-xs">
                    Not Scheduled
                  </Badge>
                )}
                {stats.currentStreak > 0 && (
                  <div className="flex items-center gap-1 text-orange-500">
                    <Flame className="w-4 h-4" />
                    <span className="text-sm font-semibold">{stats.currentStreak}</span>
                  </div>
                )}
              </div>
            </div>
          </div>
          
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="sm" className="opacity-0 group-hover:opacity-100 transition-opacity">
                <MoreHorizontal className="w-4 h-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem onClick={() => onDelete(habit.id)} className="text-error-600">
                <Trash2 className="w-4 h-4 mr-2" />
                Delete Habit
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        
        <div className="space-y-3">
          <div>
            <div className="flex justify-between text-sm mb-2">
              <span className="text-neutral-600">Sprint Progress</span>
              <span className="font-semibold text-neutral-800">{stats.percentage}%</span>
            </div>
            <Progress value={stats.percentage} className="h-2" />
          </div>
          
          <div className="grid grid-cols-3 gap-4 text-center">
            <div>
              <div className="text-lg font-bold text-neutral-800">{stats.completed}</div>
              <div className="text-xs text-neutral-500">Completed</div>
            </div>
            <div>
              <div className="text-lg font-bold text-neutral-800">{stats.currentStreak}</div>
              <div className="text-xs text-neutral-500">Streak</div>
            </div>
            <div>
              <div className="text-lg font-bold text-neutral-800">{stats.daysLeft}</div>
              <div className="text-xs text-neutral-500">Days Left</div>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

// Week View Component
const WeekView = ({ habits, selectedDate, onToggle }: { 
  habits: Habit[], 
  selectedDate: Date, 
  onToggle: (habitId: string, date: Date) => void 
}) => {
  const startOfWeek = new Date(selectedDate);
  startOfWeek.setDate(selectedDate.getDate() - selectedDate.getDay());
  
  const weekDays = Array.from({ length: 7 }, (_, i) => {
    const day = new Date(startOfWeek);
    day.setDate(startOfWeek.getDate() + i);
    return day;
  });

  const isScheduledForDate = (habit: Habit, date: Date) => {
    const dayOfWeek = date.getDay();
    switch (habit.schedule.type) {
      case 'every_day':
        return true;
      case 'specific_days':
        return habit.schedule.days.includes(dayOfWeek);
      case 'every_x_days':
        const startDate = new Date(habit.created_at);
        const daysDiff = Math.floor((date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        return daysDiff >= 0 && daysDiff % habit.schedule.interval === 0;
      default:
        return false;
    }
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-neutral-800 mb-2">
          Week of {startOfWeek.toLocaleDateString('en-US', { month: 'long', day: 'numeric' })}
        </h2>
        <p className="text-neutral-500">
          {startOfWeek.toLocaleDateString()} - {weekDays[6].toLocaleDateString()}
        </p>
      </div>

      <div className="grid grid-cols-7 gap-2 mb-6">
        {weekDays.map((day, index) => {
          const isToday = day.toDateString() === new Date().toDateString();
          const dayScheduled = habits.filter(habit => isScheduledForDate(habit, day)).length;
          const dayCompleted = habits.filter(habit => {
            const dayStr = day.toISOString().split('T')[0];
            return habit.history[dayStr] === 'completed';
          }).length;
          
          return (
            <div key={index} className={cn(
              "text-center p-3 rounded-lg",
              isToday ? "bg-brand-50 border-2 border-brand-200" : "bg-white shadow-sm"
            )}>
              <div className="font-semibold text-sm text-neutral-700">
                {day.toLocaleDateString('en-US', { weekday: 'short' })}
              </div>
              <div className="text-2xl font-bold text-neutral-800 my-1">
                {day.getDate()}
              </div>
              <div className="text-xs text-neutral-500">
                {dayCompleted}/{dayScheduled}
              </div>
              <div className="w-full bg-neutral-200 rounded-full h-1 mt-2">
                <div 
                  className="bg-brand-500 h-1 rounded-full transition-all duration-300"
                  style={{ width: dayScheduled > 0 ? `${(dayCompleted / dayScheduled) * 100}%` : '0%' }}
                />
              </div>
            </div>
          );
        })}
      </div>

      <div className="space-y-4">
        {habits.map(habit => {
          const colorHex = habit.color?.replace('bg-blue-500', '#3b82f6')
            .replace('bg-green-500', '#22c55e')
            .replace('bg-purple-500', '#a855f7')
            .replace('bg-red-500', '#ef4444')
            .replace('bg-orange-500', '#f97316')
            .replace('bg-pink-500', '#ec4899')
            .replace('bg-cyan-500', '#06b6d4')
            .replace('bg-amber-500', '#f59e0b') || '#3b82f6';

          return (
            <Card key={habit.id} className="bg-white shadow-md border-0">
              <CardContent className="p-4">
                <div className="flex items-center gap-3 mb-3">
                  <div 
                    className="w-4 h-4 rounded-full"
                    style={{ backgroundColor: colorHex }}
                  />
                  <h3 className="font-semibold text-neutral-800">{habit.name}</h3>
                </div>
                <div className="grid grid-cols-7 gap-2">
                  {weekDays.map((day, index) => {
                    const dayStr = day.toISOString().split('T')[0];
                    const isCompleted = habit.history[dayStr] === 'completed';
                    const isScheduled = isScheduledForDate(habit, day);
                    const isFuture = day > new Date();
                    
                    return (
                      <button
                        key={index}
                        onClick={() => !isFuture && isScheduled && onToggle(habit.id, day)}
                        disabled={!isScheduled || isFuture}
                        className={cn(
                          "aspect-square rounded-lg border-2 transition-all duration-200 flex items-center justify-center",
                          isCompleted && isScheduled
                            ? "border-transparent"
                            : isScheduled
                            ? "border-neutral-300 hover:border-neutral-400"
                            : "border-neutral-200 opacity-50 cursor-not-allowed"
                        )}
                        style={isCompleted && isScheduled ? { 
                          backgroundColor: '#22c55e',
                          boxShadow: `0 2px 8px -2px #22c55e` 
                        } : {}}
                      >
                        {isCompleted && isScheduled && (
                          <CheckCircle2 className="w-4 h-4 text-white" />
                        )}
                      </button>
                    );
                  })}
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );
};

// Month View Component
const MonthView = ({ habits, selectedDate, onToggle }: { 
  habits: Habit[], 
  selectedDate: Date, 
  onToggle: (habitId: string, date: Date) => void 
}) => {
  const year = selectedDate.getFullYear();
  const month = selectedDate.getMonth();
  const firstDay = new Date(year, month, 1);
  const lastDay = new Date(year, month + 1, 0);
  const startDate = new Date(firstDay);
  startDate.setDate(startDate.getDate() - firstDay.getDay());
  
  const days = [];
  const current = new Date(startDate);
  while (current <= lastDay || current.getDay() !== 0) {
    days.push(new Date(current));
    current.setDate(current.getDate() + 1);
  }

  const isScheduledForDate = (habit: Habit, date: Date) => {
    const dayOfWeek = date.getDay();
    switch (habit.schedule.type) {
      case 'every_day':
        return true;
      case 'specific_days':
        return habit.schedule.days.includes(dayOfWeek);
      case 'every_x_days':
        const startDate = new Date(habit.created_at);
        const daysDiff = Math.floor((date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
        return daysDiff >= 0 && daysDiff % habit.schedule.interval === 0;
      default:
        return false;
    }
  };

  const monthStats = {
    totalScheduled: 0,
    totalCompleted: 0,
    streaks: {} as Record<string, number>
  };

  days.forEach(day => {
    if (day.getMonth() === month) {
      habits.forEach(habit => {
        if (isScheduledForDate(habit, day)) {
          monthStats.totalScheduled++;
          const dayStr = day.toISOString().split('T')[0];
          if (habit.history[dayStr] === 'completed') {
            monthStats.totalCompleted++;
          }
        }
      });
    }
  });

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-neutral-800 mb-2">
          {selectedDate.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}
        </h2>
        <div className="flex justify-center gap-8 text-sm">
          <div className="text-center">
            <div className="text-2xl font-bold text-neutral-800">{monthStats.totalCompleted}</div>
            <div className="text-neutral-500">Completed</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-neutral-800">{monthStats.totalScheduled}</div>
            <div className="text-neutral-500">Scheduled</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-neutral-800">
              {Math.round(monthStats.totalScheduled > 0 ? (monthStats.totalCompleted / monthStats.totalScheduled) * 100 : 0)}%
            </div>
            <div className="text-neutral-500">Success Rate</div>
          </div>
        </div>
      </div>

      <Card className="bg-white shadow-md border-0">
        <CardContent className="p-6">
          <div className="grid grid-cols-7 gap-2 mb-4">
            {['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].map(day => (
              <div key={day} className="text-center font-semibold text-neutral-600 py-2">
                {day}
              </div>
            ))}
          </div>
          
          <div className="grid grid-cols-7 gap-2">
            {days.map((day, index) => {
              const isCurrentMonth = day.getMonth() === month;
              const isToday = day.toDateString() === new Date().toDateString();
              const dayScheduled = habits.filter(habit => isScheduledForDate(habit, day)).length;
              const dayCompleted = habits.filter(habit => {
                const dayStr = day.toISOString().split('T')[0];
                return habit.history[dayStr] === 'completed';
              }).length;
              
              return (
                <div
                  key={index}
                  className={cn(
                    "aspect-square flex flex-col items-center justify-center rounded-lg text-sm",
                    isCurrentMonth ? "bg-white" : "bg-neutral-50 text-neutral-400",
                    isToday && "bg-brand-50 border-2 border-brand-200"
                  )}
                >
                  <div className={cn(
                    "font-semibold",
                    isCurrentMonth ? "text-neutral-800" : "text-neutral-400"
                  )}>
                    {day.getDate()}
                  </div>
                  {isCurrentMonth && dayScheduled > 0 && (
                    <div className="flex gap-0.5 mt-1">
                      {Array.from({ length: Math.min(dayScheduled, 3) }, (_, i) => (
                        <div
                          key={i}
                          className={cn(
                            "w-1 h-1 rounded-full",
                            i < dayCompleted ? "bg-brand-500" : "bg-neutral-300"
                          )}
                        />
                      ))}
                      {dayScheduled > 3 && (
                        <div className="text-xs text-neutral-400">+</div>
                      )}
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

// Sprint View Component  
const SprintView = ({ habits, onToggle }: { 
  habits: Habit[], 
  onToggle: (habitId: string, date: Date) => void 
}) => {
  const sprintStats = habits.map(habit => calculateSprintProgress(habit));
  const totalCompleted = sprintStats.reduce((sum, stat) => sum + stat.completed, 0);
  const totalOpportunities = sprintStats.reduce((sum, stat) => sum + stat.total, 0);
  const avgProgress = sprintStats.length > 0 ? sprintStats.reduce((sum, stat) => sum + stat.percentage, 0) / sprintStats.length : 0;

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-neutral-800 mb-2">90-Day Sprint Overview</h2>
        <p className="text-neutral-500">Your 3-month journey progress</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card className="bg-white shadow-md border-0">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 bg-brand-100 rounded-2xl flex items-center justify-center mx-auto mb-3">
              <Target className="w-6 h-6 text-brand-600" />
            </div>
            <div className="text-2xl font-bold text-neutral-800">{Math.round(avgProgress)}%</div>
            <div className="text-sm text-neutral-500">Average Progress</div>
          </CardContent>
        </Card>

        <Card className="bg-white shadow-md border-0">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 bg-success-100 rounded-2xl flex items-center justify-center mx-auto mb-3">
              <CheckCircle2 className="w-6 h-6 text-success-600" />
            </div>
            <div className="text-2xl font-bold text-neutral-800">{totalCompleted}</div>
            <div className="text-sm text-neutral-500">Total Completed</div>
          </CardContent>
        </Card>

        <Card className="bg-white shadow-md border-0">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 bg-orange-100 rounded-2xl flex items-center justify-center mx-auto mb-3">
              <Flame className="w-6 h-6 text-orange-600" />
            </div>
            <div className="text-2xl font-bold text-neutral-800">
              {Math.max(...sprintStats.map(s => s.currentStreak))}
            </div>
            <div className="text-sm text-neutral-500">Best Streak</div>
          </CardContent>
        </Card>

        <Card className="bg-white shadow-md border-0">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 bg-purple-100 rounded-2xl flex items-center justify-center mx-auto mb-3">
              <Calendar className="w-6 h-6 text-purple-600" />
            </div>
            <div className="text-2xl font-bold text-neutral-800">
              {Math.min(...sprintStats.map(s => s.daysLeft))}
            </div>
            <div className="text-sm text-neutral-500">Days Remaining</div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {habits.map((habit, index) => {
          const stats = sprintStats[index];
          const colorHex = habit.color?.replace('bg-blue-500', '#3b82f6')
            .replace('bg-green-500', '#22c55e')
            .replace('bg-purple-500', '#a855f7')
            .replace('bg-red-500', '#ef4444')
            .replace('bg-orange-500', '#f97316')
            .replace('bg-pink-500', '#ec4899')
            .replace('bg-cyan-500', '#06b6d4')
            .replace('bg-amber-500', '#f59e0b') || '#3b82f6';

          return (
            <Card key={habit.id} className="bg-white shadow-md border-0">
              <CardContent className="p-6">
                <div className="flex items-center gap-3 mb-4">
                  <div 
                    className="w-6 h-6 rounded-full"
                    style={{ backgroundColor: colorHex }}
                  />
                  <h3 className="text-lg font-semibold text-neutral-800">{habit.name}</h3>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <div className="flex justify-between text-sm mb-2">
                      <span className="text-neutral-600">Sprint Progress</span>
                      <span className="font-semibold text-neutral-800">{stats.percentage}%</span>
                    </div>
                    <Progress value={stats.percentage} className="h-3" />
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 text-center">
                    <div>
                      <div className="text-xl font-bold text-neutral-800">{stats.completed}</div>
                      <div className="text-xs text-neutral-500">Completed</div>
                    </div>
                    <div>
                      <div className="text-xl font-bold text-neutral-800">{stats.currentStreak}</div>
                      <div className="text-xs text-neutral-500">Current Streak</div>
                    </div>
                    <div>
                      <div className="text-xl font-bold text-neutral-800">{stats.daysLeft}</div>
                      <div className="text-xs text-neutral-500">Days Left</div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );
};

// Year View Component
const YearView = ({ habits, selectedDate }: { 
  habits: Habit[], 
  selectedDate: Date 
}) => {
  const year = selectedDate.getFullYear();
  const months = Array.from({ length: 12 }, (_, i) => new Date(year, i, 1));
  
  const yearStats = {
    totalCompleted: 0,
    totalScheduled: 0,
    monthlyData: [] as Array<{ month: string, completed: number, scheduled: number }>
  };

  months.forEach(month => {
    const monthData = { 
      month: month.toLocaleDateString('en-US', { month: 'short' }), 
      completed: 0, 
      scheduled: 0 
    };
    
    const daysInMonth = new Date(year, month.getMonth() + 1, 0).getDate();
    
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(year, month.getMonth(), day);
      habits.forEach(habit => {
        const dayOfWeek = date.getDay();
        let isScheduled = false;
        
        switch (habit.schedule.type) {
          case 'every_day':
            isScheduled = true;
            break;
          case 'specific_days':
            isScheduled = habit.schedule.days.includes(dayOfWeek);
            break;
          case 'every_x_days':
            const startDate = new Date(habit.created_at);
            const daysDiff = Math.floor((date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
            isScheduled = daysDiff >= 0 && daysDiff % habit.schedule.interval === 0;
            break;
        }
        
        if (isScheduled) {
          monthData.scheduled++;
          yearStats.totalScheduled++;
          
          const dateStr = date.toISOString().split('T')[0];
          if (habit.history[dateStr] === 'completed') {
            monthData.completed++;
            yearStats.totalCompleted++;
          }
        }
      });
    }
    
    yearStats.monthlyData.push(monthData);
  });

  return (
    <div className="space-y-6">
      <div className="text-center">
        <h2 className="text-2xl font-bold text-neutral-800 mb-2">{year} Year Overview</h2>
        <p className="text-neutral-500">Your full year habit journey</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="bg-white shadow-md border-0">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 bg-brand-100 rounded-2xl flex items-center justify-center mx-auto mb-3">
              <TrendingUp className="w-6 h-6 text-brand-600" />
            </div>
            <div className="text-2xl font-bold text-neutral-800">{yearStats.totalCompleted}</div>
            <div className="text-sm text-neutral-500">Total Completed</div>
          </CardContent>
        </Card>
        
        <Card className="bg-white shadow-md border-0">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 bg-success-100 rounded-2xl flex items-center justify-center mx-auto mb-3">
              <CheckCircle2 className="w-6 h-6 text-success-600" />
            </div>
            <div className="text-2xl font-bold text-neutral-800">
              {Math.round(yearStats.totalScheduled > 0 ? (yearStats.totalCompleted / yearStats.totalScheduled) * 100 : 0)}%
            </div>
            <div className="text-sm text-neutral-500">Success Rate</div>
          </CardContent>
        </Card>
        
        <Card className="bg-white shadow-md border-0">
          <CardContent className="p-6 text-center">
            <div className="w-12 h-12 bg-purple-100 rounded-2xl flex items-center justify-center mx-auto mb-3">
              <Calendar className="w-6 h-6 text-purple-600" />
            </div>
            <div className="text-2xl font-bold text-neutral-800">{habits.length}</div>
            <div className="text-sm text-neutral-500">Active Habits</div>
          </CardContent>
        </Card>
      </div>

      <Card className="bg-white shadow-md border-0">
        <CardContent className="p-6">
          <h3 className="text-lg font-semibold text-neutral-800 mb-4">Monthly Progress</h3>
          <div className="grid grid-cols-12 gap-2">
            {yearStats.monthlyData.map((month, index) => {
              const percentage = month.scheduled > 0 ? (month.completed / month.scheduled) * 100 : 0;
              return (
                <div key={index} className="text-center">
                  <div className="text-xs font-medium text-neutral-600 mb-2">{month.month}</div>
                  <div className="bg-neutral-200 rounded-full h-20 w-4 mx-auto relative">
                    <div 
                      className="bg-brand-500 rounded-full w-full absolute bottom-0 transition-all duration-500"
                      style={{ height: `${percentage}%` }}
                    />
                  </div>
                  <div className="text-xs text-neutral-500 mt-2">{Math.round(percentage)}%</div>
                </div>
              );
            })}
          </div>
        </CardContent>
      </Card>

      <div className="grid grid-cols-1 gap-4">
        {habits.map(habit => {
          const colorHex = habit.color?.replace('bg-blue-500', '#3b82f6')
            .replace('bg-green-500', '#22c55e')
            .replace('bg-purple-500', '#a855f7')
            .replace('bg-red-500', '#ef4444')
            .replace('bg-orange-500', '#f97316')
            .replace('bg-pink-500', '#ec4899')
            .replace('bg-cyan-500', '#06b6d4')
            .replace('bg-amber-500', '#f59e0b') || '#3b82f6';

          const habitYearData = months.map(month => {
            const daysInMonth = new Date(year, month.getMonth() + 1, 0).getDate();
            let completed = 0;
            let scheduled = 0;
            
            for (let day = 1; day <= daysInMonth; day++) {
              const date = new Date(year, month.getMonth(), day);
              const dayOfWeek = date.getDay();
              let isScheduled = false;
              
              switch (habit.schedule.type) {
                case 'every_day':
                  isScheduled = true;
                  break;
                case 'specific_days':
                  isScheduled = habit.schedule.days.includes(dayOfWeek);
                  break;
                case 'every_x_days':
                  const startDate = new Date(habit.created_at);
                  const daysDiff = Math.floor((date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));
                  isScheduled = daysDiff >= 0 && daysDiff % habit.schedule.interval === 0;
                  break;
              }
              
              if (isScheduled) {
                scheduled++;
                const dateStr = date.toISOString().split('T')[0];
                if (habit.history[dateStr] === 'completed') {
                  completed++;
                }
              }
            }
            
            return { completed, scheduled, percentage: scheduled > 0 ? (completed / scheduled) * 100 : 0 };
          });

          return (
            <Card key={habit.id} className="bg-white shadow-md border-0">
              <CardContent className="p-6">
                <div className="flex items-center gap-3 mb-4">
                  <div 
                    className="w-4 h-4 rounded-full"
                    style={{ backgroundColor: colorHex }}
                  />
                  <h3 className="font-semibold text-neutral-800">{habit.name}</h3>
                </div>
                <div className="grid grid-cols-12 gap-1">
                  {habitYearData.map((month, index) => (
                    <div key={index} className="text-center">
                      <div 
                        className="w-full h-8 rounded"
                        style={{ 
                          backgroundColor: `${colorHex}${Math.round(month.percentage * 2.55).toString(16).padStart(2, '0')}` 
                        }}
                        title={`${Math.round(month.percentage)}% completed`}
                      />
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    </div>
  );
};

// Custom Tooltip Component
const Tooltip = ({ children, content }: { children: React.ReactNode; content: string }) => {
  const [isVisible, setIsVisible] = useState(false)

  return (
    <div 
      className="relative"
      onMouseEnter={() => setIsVisible(true)}
      onMouseLeave={() => setIsVisible(false)}
    >
      {children}
      {isVisible && (
        <div className="absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg shadow-lg z-50 max-w-xs text-center">
          {content}
          <div className="absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-gray-900"></div>
        </div>
      )}
    </div>
  )
}

const GridView = ({ habits, onToggle, onAddHabit, onDeleteHabit }: { 
  habits: Habit[], 
  onToggle: (habitId: string, date: Date) => void,
  onAddHabit: (habitData: Omit<Habit, "id" | "history" | "totalCompletions" | "currentStreak" | "longestStreak" | "created_at" | "user_id">) => Promise<void>,
  onDeleteHabit: (habitId: string) => Promise<void>
}) => {
  // Generate 90 days starting from today going backwards
  const days = Array.from({ length: 90 }, (_, i) => {
    const date = new Date()
    date.setDate(date.getDate() - (89 - i))
    return date
  })

  const isScheduledForDate = (habit: Habit, date: Date): boolean => {
    const dayOfWeek = date.getDay()
    switch (habit.schedule.type) {
      case 'every_day':
        return true
      case 'specific_days':
        return habit.schedule.days?.includes(dayOfWeek) || false
      case 'every_x_days':
        const startDate = new Date(habit.created_at)
        const daysDiff = Math.floor((date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))
        return daysDiff >= 0 && daysDiff % (habit.schedule.interval || 1) === 0
      default:
        return false
    }
  }

  const getDayStatus = (habit: Habit, date: Date) => {
    const dateStr = date.toISOString().split('T')[0]
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    date.setHours(0, 0, 0, 0)
    
    if (habit.history[dateStr] === 'completed') return 'completed'
    
    const isScheduled = isScheduledForDate(habit, date)
    if (!isScheduled) return 'not_scheduled'
    if (date > today) return 'future'
    return 'missed'
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-600'
      case 'missed': return 'bg-red-600'
      case 'future': return 'bg-white border border-gray-200 hover:bg-gray-50'
      case 'not_scheduled': return 'bg-gray-600'
      default: return 'bg-gray-200'
    }
  }

  // Calculate stats
  const overallStats = habits.reduce((acc, habit) => {
    days.forEach(day => {
      const status = getDayStatus(habit, day)
      if (status === 'completed') acc.completed++
      else if (status === 'missed') acc.missed++
    })
    return acc
  }, { completed: 0, missed: 0 })

  const totalOpportunities = overallStats.completed + overallStats.missed
  const todayStats = habits.reduce((acc, habit) => {
    const today = new Date()
    const status = getDayStatus(habit, today)
    if (status === 'completed') acc.completed++
    else if (status === 'missed' || status === 'future') acc.available++
    return acc
  }, { completed: 0, available: 0 })

  return (
    <div className="space-y-6">
      {/* Quick Stats and Add Button */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-6 text-sm">
          <div>
            <span className="text-neutral-500">Completed: </span>
            <span className="font-semibold text-green-600">{overallStats.completed}</span>
          </div>
          <div>
            <span className="text-neutral-500">Missed: </span>
            <span className="font-semibold text-red-600">{overallStats.missed}</span>
          </div>
          <div>
            <span className="text-neutral-500">Success Rate: </span>
            <span className="font-semibold text-neutral-800">
              {totalOpportunities > 0 ? Math.round((overallStats.completed / totalOpportunities) * 100) : 0}%
            </span>
          </div>
          <div>
            <span className="text-neutral-500">Today: </span>
            <span className="font-semibold text-blue-600">{todayStats.available} available</span>
          </div>
        </div>
        
        <AddHabitDialog onAddHabit={onAddHabit}>
          <Button className="bg-neutral-800 hover:bg-neutral-900 text-white">
            + Add Habit
          </Button>
        </AddHabitDialog>
      </div>

      {/* Grid */}
      <div className="bg-white rounded-lg border border-neutral-200 overflow-hidden">
        {habits.length === 0 ? (
          <div className="p-12 text-center">
            <div className="text-neutral-400 mb-4">
              <svg className="w-16 h-16 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
            </div>
            <h3 className="text-lg font-medium text-neutral-600 mb-2">No habits yet</h3>
            <p className="text-neutral-500 mb-6">Create your first habit to start your 90-day journey</p>
            <AddHabitDialog onAddHabit={onAddHabit}>
              <Button className="bg-neutral-800 hover:bg-neutral-900 text-white">
                Create Your First Habit
              </Button>
            </AddHabitDialog>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <div className="min-w-max">
              {/* Week day headers */}
              <div className="flex bg-gray-50 border-b border-neutral-200">
                <div className="w-[200px] p-3 font-medium text-neutral-700 border-r border-neutral-200">
                  Habits
                </div>
                <div 
                  className="flex"
                  style={{ display: 'inline-grid', gridTemplateColumns: 'repeat(90, 12px)', gap: '0px' }}
                >
                  {['S', 'M', 'T', 'W', 'T', 'F', 'S'].map((day, index) => (
                    <div key={index} className="text-xs text-neutral-500 text-center py-2 font-medium">
                      {day}
                    </div>
                  ))}
                  {/* Fill remaining columns with empty divs to maintain grid */}
                  {Array.from({ length: 83 }, (_, i) => (
                    <div key={i + 7} className="py-2"></div>
                  ))}
                </div>
              </div>

              {/* Habit rows */}
              {habits.map((habit) => (
                <div key={habit.id} className="flex border-b border-neutral-100 hover:bg-gray-50 group">
                  <div className="w-[200px] p-3 border-r border-neutral-200 flex items-center justify-between">
                    <div>
                      <div className="font-medium text-neutral-800 text-sm">{habit.name}</div>
                      <div className="text-xs text-neutral-500">
                        {habit.schedule.type === 'every_day' ? 'Daily' :
                         habit.schedule.type === 'specific_days' ? `${habit.schedule.days?.length || 0} days/week` :
                         `Every ${habit.schedule.interval} days`}
                      </div>
                    </div>
                    <button
                      onClick={() => onDeleteHabit(habit.id)}
                      className="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-700 transition-opacity"
                      title="Delete habit"
                    >
                      <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                  <div 
                    className="flex items-center"
                    style={{ display: 'inline-grid', gridTemplateColumns: 'repeat(90, 12px)', gap: '0px' }}
                  >
                    {days.map((day, dayIndex) => {
                      const status = getDayStatus(habit, day)
                      const dateStr = day.toISOString().split('T')[0]
                      const canToggle = status === 'completed' || status === 'missed'
                      
                      return (
                        <div key={dayIndex} className="flex justify-center items-center py-2">
                          <button
                            onClick={() => canToggle && onToggle(habit.id, day)}
                            disabled={!canToggle}
                            className={`w-3 h-3 transition-transform hover:scale-110 ${getStatusColor(status)} ${
                              canToggle ? 'cursor-pointer' : 'cursor-default'
                            }`}
                            title={`${day.toLocaleDateString()}: ${status.replace('_', ' ')}`}
                          />
                        </div>
                      )
                    })}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Legend */}
      <div className="flex items-center justify-center gap-6 text-xs text-neutral-600">
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-green-600"></div>
          <span>Completed</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-red-600"></div>
          <span>Missed</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-white border border-gray-200"></div>
          <span>Future</span>
        </div>
        <div className="flex items-center gap-2">
          <div className="w-3 h-3 bg-gray-600"></div>
          <span>Not Scheduled</span>
        </div>
      </div>
    </div>
  )
}

export default function DashboardPage() {
  const [habits, setHabits] = useState<Habit[]>([])
  const [session, setSession] = useState<Session | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [showAnalytics, setShowAnalytics] = useState(false)

  const supabase = createClientComponentClient()
  const router = useRouter()

  useEffect(() => {
    if (!supabase) {
      router.push('/login')
      return
    }

    const fetchSession = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setSession(session);
      setIsLoading(false);
      
      if (!session) {
        router.push('/login');
        return;
      }
    }
    fetchSession();

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
      if (!session) {
        router.push('/login');
      }
    });

    return () => subscription.unsubscribe();
  }, [])

  useEffect(() => {
    if (session) {
      fetchHabits()
    }
  }, [session])

  const fetchHabits = async () => {
    if (!supabase) return
    
    const { data: habits, error } = await supabase
      .from('habits')
      .select('*')
      .order('created_at', { ascending: true })

    if (error) {
      console.error('Error fetching habits:', error)
    } else {
      setHabits(habits || [])
    }
  }

  const handleSignOut = async () => {
    if (!supabase) return
    
    await supabase.auth.signOut()
    window.location.href = '/login'
  }

  const addHabit = async (habitData: Omit<Habit, "id" | "history" | "totalCompletions" | "currentStreak" | "longestStreak" | "created_at" | "user_id">) => {
    if (!session || !supabase) return;
    
    const newHabitForDB = {
      ...habitData,
      user_id: session.user.id,
      history: {},
      total_completions: 0,
    };
    
    const { data, error } = await supabase
      .from('habits')
      .insert([newHabitForDB])
      .select()
    
    if (error) {
      console.error('Error adding habit:', error);
      alert('Error adding habit: ' + error.message);
    } else if (data) {
        const newHabits = [...habits, ...data];
        setHabits(newHabits);
    }
  }

  const toggleHabit = async (habitId: string, dateToToggle: Date) => {
    if (!supabase) return
    
    const dateStr = dateToToggle.toISOString().split("T")[0]
    
    const habit = habits.find((h) => h.id === habitId);
    if (!habit) return;

    const newHistory = { ...habit.history };
    const currentStatus = newHistory[dateStr];

    if (currentStatus === 'completed') {
        delete newHistory[dateStr];
    } else {
      newHistory[dateStr] = 'completed';
    }
    
    const newTotalCompletions = Object.values(newHistory).filter(s => s === 'completed').length;
    
    const { error } = await supabase
      .from('habits')
      .update({ 
        history: newHistory,
        total_completions: newTotalCompletions,
       })
      .eq('id', habitId)

    if (error) {
      console.error('Error toggling habit:', error)
    } else {
      fetchHabits(); 
    }
  }

  const deleteHabit = async (habitId: string) => {
    if (!supabase) return
    
    const { error } = await supabase
      .from('habits')
      .delete()
      .eq('id', habitId)
    
    if (error) {
      console.error('Error deleting habit:', error)
    } else {
      const newHabits = habits.filter((habit) => habit.id !== habitId)
      setHabits(newHabits)
    }
  }

  if (isLoading || !session) {
    return (
      <div className="min-h-screen flex items-center justify-center p-4" style={{backgroundColor: '#e2e8f0'}}>
        <Card className="bg-white shadow-xl border-0 max-w-md w-full">
          <CardContent className="p-8 text-center">
            <div className="w-96 h-48 mx-auto mb-6 flex items-center justify-center">
              <Wordmark size="xl" />
            </div>
            <h2 className="text-2xl font-semibold text-neutral-900 mb-2 tracking-tight">Loading...</h2>
            <p className="text-neutral-500 mb-6">Please wait while we redirect you to login</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen" style={{backgroundColor: '#e2e8f0'}}>
      <div className="container mx-auto px-4 py-8 max-w-7xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <Wordmark />
          <button
            onClick={handleSignOut}
            className="text-neutral-600 hover:text-neutral-800 transition-colors"
          >
            Sign Out
          </button>
        </div>

        {/* Grid View */}
        <GridView 
          habits={habits} 
          onToggle={toggleHabit}
          onAddHabit={addHabit}
          onDeleteHabit={deleteHabit}
        />

        {/* Analytics Toggle Button */}
        <div className="flex justify-center mt-8">
          <button
            onClick={() => setShowAnalytics(!showAnalytics)}
            className="flex items-center gap-2 px-4 py-2 bg-white border border-neutral-200 rounded-lg hover:bg-neutral-50 transition-colors"
          >
            <svg 
              className={`w-4 h-4 transition-transform ${showAnalytics ? 'rotate-180' : ''}`} 
              fill="none" 
              viewBox="0 0 24 24" 
              stroke="currentColor"
            >
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
            </svg>
            <span className="text-sm font-medium text-neutral-700">
              {showAnalytics ? 'Hide Analytics' : 'Show Analytics & Insights'}
            </span>
          </button>
        </div>

        {/* Analytics Drawer */}
        <div className={`overflow-hidden transition-all duration-300 ease-in-out ${
          showAnalytics ? 'max-h-[2000px] opacity-100 mt-8' : 'max-h-0 opacity-0'
        }`}>
          <div className="space-y-8">

            {/* Analytics & Insights */}
            <div className="bg-white rounded-lg p-6 border border-neutral-200">
              <h2 className="text-xl font-bold text-neutral-800 mb-6">Analytics & Insights</h2>
              
              {/* Overall Performance Cards */}
              <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4">
                {/* Current Streak */}
                <Tooltip content="Your current streak counts how many days in a row you've completed at least one habit. The longer your streak, the stronger your momentum becomes!">
                  <div className="bg-white rounded-lg p-4 border border-neutral-200 text-center hover:shadow-md transition-shadow cursor-help">
                    <div className={`text-2xl font-bold ${(() => {
                      // Calculate current streak (consecutive days with at least one completion)
                      let streak = 0
                      const today = new Date()
                      today.setHours(0, 0, 0, 0)
                      
                      for (let i = 0; i < 90; i++) {
                        const checkDate = new Date(today)
                        checkDate.setDate(today.getDate() - i)
                        
                        let hasCompletion = false
                        habits.forEach(habit => {
                          const status = getDayStatus(habit, checkDate)
                          if (status === 'completed') hasCompletion = true
                        })
                        
                        if (hasCompletion) {
                          streak++
                        } else {
                          break
                        }
                      }
                      
                      // Check if it's a personal best (simplified - assume current is best for now)
                      const isPersonalBest = streak > 7 // Placeholder logic
                      return isPersonalBest ? 'text-yellow-500' : 'text-green-700'
                    })()}`}>
                      {(() => {
                        let streak = 0
                        const today = new Date()
                        today.setHours(0, 0, 0, 0)
                        
                        for (let i = 0; i < 90; i++) {
                          const checkDate = new Date(today)
                          checkDate.setDate(today.getDate() - i)
                          
                          let hasCompletion = false
                          habits.forEach(habit => {
                            const status = getDayStatus(habit, checkDate)
                            if (status === 'completed') hasCompletion = true
                          })
                          
                          if (hasCompletion) {
                            streak++
                          } else {
                            break
                          }
                        }
                        return streak
                      })()}
                    </div>
                    <div className="text-xs text-neutral-600 font-medium">Current Streak</div>
                    <div className="text-xs text-neutral-500">Consecutive Days</div>
                  </div>
                </Tooltip>

                {/* Total Commits */}
                <Tooltip content="Total commits shows how many habits you've completed out of all possible opportunities during your 90-day journey. Think of each completed habit as a 'commit' to your goals!">
                  <div className="bg-neutral-50 rounded-lg p-4 border border-neutral-200 text-center hover:shadow-md transition-shadow cursor-help">
                    <div className="text-2xl font-bold text-amber-800">
                      {overallStats.completed}/{(() => {
                        // Calculate total possible commits (assuming average 3 habits per day over 90 days)
                        const totalDays = 90
                        const avgHabitsPerDay = Math.max(habits.length, 3)
                        return totalDays * avgHabitsPerDay
                      })()}
                    </div>
                    <div className="text-xs text-neutral-600 font-medium">Total Commits</div>
                    <div className="w-full bg-neutral-200 rounded-full h-2 mt-2">
                      <div 
                        className="bg-green-700 h-2 rounded-full transition-all duration-300"
                        style={{ 
                          width: `${Math.min((overallStats.completed / (90 * Math.max(habits.length, 3))) * 100, 100)}%` 
                        }}
                      ></div>
                    </div>
                  </div>
                </Tooltip>

                {/* Sprint Progress */}
                <Tooltip content="Sprint progress shows how far you are through your 90-day habit journey. Breaking it into a percentage makes the big goal feel more manageable and shows your momentum!">
                  <div className="bg-white rounded-lg p-4 border border-neutral-200 text-center hover:shadow-md transition-shadow cursor-help">
                    <div className="text-2xl font-bold text-green-700">
                      {(() => {
                        const today = new Date()
                        const startDate = habits.length > 0 ? 
                          new Date(Math.min(...habits.map(h => new Date(h.created_at).getTime()))) : 
                          today
                        const daysPassed = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))
                        const sprintProgress = Math.min(Math.round((daysPassed / 90) * 100), 100)
                        return sprintProgress
                      })()}%
                    </div>
                    <div className="text-xs text-neutral-600 font-medium">Sprint Progress</div>
                    <div className="w-full bg-green-100 rounded-full h-2 mt-2">
                      <div 
                        className="bg-green-700 h-2 rounded-full transition-all duration-300"
                        style={{ 
                          width: `${(() => {
                            const today = new Date()
                            const startDate = habits.length > 0 ? 
                              new Date(Math.min(...habits.map(h => new Date(h.created_at).getTime()))) : 
                              today
                            const daysPassed = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))
                            return Math.min((daysPassed / 90) * 100, 100)
                          })()}%` 
                        }}
                      ></div>
                    </div>
                    <div className="text-xs text-neutral-500 mt-1">
                      {(() => {
                        const today = new Date()
                        const startDate = habits.length > 0 ? 
                          new Date(Math.min(...habits.map(h => new Date(h.created_at).getTime()))) : 
                          today
                        const daysPassed = Math.floor((today.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))
                        return `${Math.min(daysPassed, 90)}/90 Days`
                      })()}
                    </div>
                  </div>
                </Tooltip>

                {/* Weekly Commitment Rate */}
                <Tooltip content="Weekly commitment rate shows what percentage of your habits you completed this week. The colored squares show each day: green = completed habits, red = missed habits, gray = no habits scheduled.">
                  <div className="bg-white rounded-lg p-4 border border-neutral-200 text-center hover:shadow-md transition-shadow cursor-help">
                    <div className="text-2xl font-bold text-amber-800">
                      {(() => {
                        const last7Days = days.slice(-7)
                        const weekStats = last7Days.reduce((acc, day) => {
                          habits.forEach(habit => {
                            const status = getDayStatus(habit, day)
                            if (status === 'completed') acc.completed++
                            else if (status === 'missed') acc.missed++
                          })
                          return acc
                        }, { completed: 0, missed: 0 })
                        
                        const total = weekStats.completed + weekStats.missed
                        return total > 0 ? Math.round((weekStats.completed / total) * 100) : 0
                      })()}%
                    </div>
                    <div className="text-xs text-neutral-600 font-medium">This Week</div>
                    <div className="flex justify-center gap-1 mt-2">
                      {days.slice(-7).map((day, index) => {
                        let hasCompletion = false
                        let hasMissed = false
                        habits.forEach(habit => {
                          const status = getDayStatus(habit, day)
                          if (status === 'completed') hasCompletion = true
                          else if (status === 'missed') hasMissed = true
                        })
                        
                        return (
                          <div
                            key={index}
                            className={`w-3 h-3 rounded-sm ${
                              hasCompletion ? 'bg-green-500' : hasMissed ? 'bg-red-500' : 'bg-gray-200'
                            }`}
                          ></div>
                        )
                      })}
                    </div>
                  </div>
                </Tooltip>

                {/* Missed Days Ratio */}
                <Tooltip content="Missed days ratio shows how many habit opportunities you've missed out of your total opportunities. Don't worry - this helps you learn your patterns, not judge yourself!">
                  <div className="bg-white rounded-lg p-4 border border-neutral-200 text-center hover:shadow-md transition-shadow cursor-help">
                    <div className="text-2xl font-bold text-gray-500">
                      {(() => {
                        const totalOpportunities = overallStats.completed + overallStats.missed
                        const missedRatio = totalOpportunities > 0 ? 
                          Math.round((overallStats.missed / totalOpportunities) * 100) : 0
                        return `${overallStats.missed}/${Math.floor(totalOpportunities)} (${missedRatio}%)`
                      })()}
                    </div>
                    <div className="text-xs text-neutral-600 font-medium">Missed Days</div>
                    {(() => {
                      const totalOpportunities = overallStats.completed + overallStats.missed
                      const missedRatio = totalOpportunities > 0 ? 
                        (overallStats.missed / totalOpportunities) * 100 : 0
                      
                      if (missedRatio > 20) {
                        return (
                          <div className="text-xs text-amber-600 mt-1 font-medium">
                            Try a catch-up task?
                          </div>
                        )
                      }
                      return <div className="text-xs text-neutral-500 mt-1">On track!</div>
                    })()}
                  </div>
                </Tooltip>
              </div>
            </div>

            {/* Individual Habit Performance */}
            <div className="bg-white rounded-lg p-6 border border-neutral-200">
              <h3 className="text-lg font-bold text-neutral-800 mb-4">Habit Performance</h3>
              <div className="space-y-4">
                {habits.map((habit) => {
                  const habitStats = days.reduce((acc, day) => {
                    const status = getDayStatus(habit, day)
                    if (status === 'completed') acc.completed++
                    else if (status === 'missed') acc.missed++
                    return acc
                  }, { completed: 0, missed: 0 })

                  const habitTotal = habitStats.completed + habitStats.missed
                  const successRate = habitTotal > 0 ? Math.round((habitStats.completed / habitTotal) * 100) : 0
                  
                  // Calculate current streak
                  let currentStreak = 0
                  const today = new Date()
                  today.setHours(0, 0, 0, 0)
                  
                  for (let i = 0; i < 90; i++) {
                    const checkDate = new Date(today)
                    checkDate.setDate(today.getDate() - i)
                    const status = getDayStatus(habit, checkDate)
                    
                    if (status === 'completed') {
                      currentStreak++
                    } else if (status === 'missed') {
                      break
                    }
                  }
                  
                  // Calculate best streak
                  let bestStreak = 0
                  let tempStreak = 0
                  
                  for (let i = 89; i >= 0; i--) {
                    const checkDate = new Date(today)
                    checkDate.setDate(today.getDate() - i)
                    const status = getDayStatus(habit, checkDate)
                    
                    if (status === 'completed') {
                      tempStreak++
                      bestStreak = Math.max(bestStreak, tempStreak)
                    } else if (status === 'missed') {
                      tempStreak = 0
                    }
                  }

                  const getScheduleDisplay = (habit: Habit) => {
                    switch (habit.schedule.type) {
                      case 'every_day':
                        return 'Daily'
                      case 'specific_days':
                        return `${habit.schedule.days?.length || 0} Days/Week`
                      case 'every_x_days':
                        return `Every ${habit.schedule.interval} Days`
                      default:
                        return 'Custom'
                    }
                  }

                  return (
                    <div key={habit.id} className="flex items-center justify-between p-4 bg-neutral-50 rounded-lg">
                      <div className="flex-1">
                        <div className="font-semibold text-neutral-800">{habit.name}</div>
                        <div className="text-sm text-neutral-500">{getScheduleDisplay(habit)}</div>
                      </div>
                      <div className="flex items-center gap-6 text-sm">
                        <div className="text-center">
                          <div className="font-bold text-green-600">{habitStats.completed}</div>
                          <div className="text-neutral-500">Done</div>
                        </div>
                        <div className="text-center">
                          <div className="font-bold text-red-600">{habitStats.missed}</div>
                          <div className="text-neutral-500">Missed</div>
                        </div>
                        <div className="text-center">
                          <div className="font-bold text-neutral-800">{successRate}%</div>
                          <div className="text-neutral-500">Success</div>
                        </div>
                        <div className="text-center">
                          <div className="font-bold text-orange-600">{currentStreak}</div>
                          <div className="text-neutral-500">Current</div>
                        </div>
                        <div className="text-center">
                          <div className="font-bold text-purple-600">{bestStreak}</div>
                          <div className="text-neutral-500">Best</div>
                        </div>
                      </div>
                    </div>
                  )
                })}
              </div>
            </div>

            {/* Weekly Performance Breakdown */}
            <div className="bg-white rounded-lg p-6 border border-neutral-200">
              <h3 className="text-lg font-bold text-neutral-800 mb-4">Weekly Performance Breakdown</h3>
              <div className="grid grid-cols-7 gap-4">
                {['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'].map((dayName, dayIndex) => {
                  const dayStats = days.reduce((acc, day) => {
                    if (day.getDay() === dayIndex) {
                      habits.forEach(habit => {
                        const status = getDayStatus(habit, day)
                        if (status === 'completed') acc.completed++
                        else if (status === 'missed') acc.missed++
                      })
                    }
                    return acc
                  }, { completed: 0, missed: 0 })

                  const dayTotal = dayStats.completed + dayStats.missed
                  const daySuccessRate = dayTotal > 0 ? Math.round((dayStats.completed / dayTotal) * 100) : 0

                  return (
                    <div key={dayIndex} className="text-center p-3 bg-gray-50 rounded-lg">
                      <div className="text-sm font-medium text-neutral-700">{dayName.slice(0, 3)}</div>
                      <div className="text-lg font-bold text-neutral-800 mt-1">{daySuccessRate}%</div>
                      <div className="text-xs text-neutral-500">{dayStats.completed}/{dayTotal}</div>
                    </div>
                  )
                })}
              </div>
            </div>

          </div>
        </div>

      </div>
    </div>
  )
}